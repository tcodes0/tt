import { execSync } from "child_process"
import { cli } from "../src/app"
import { readFileSync, statSync, writeFileSync } from "fs"
import {
  ttDir,
  cliArgs,
  dev_ttDir,
  noop,
  production,
  ttFiles,
  stateFile,
  historyFile,
} from "../src/util"
import rm from "rimraf"
import { State } from "../src/core"

const testDir = `${dev_ttDir}-mode_new.test`
const testState = `${testDir}/${stateFile}`
const testHistory = `${testDir}/${historyFile}`

beforeAll(() => {
  execSync(`mkdir -p ${testDir}`)
  const testJSON = { autoGenerated: 0 }

  ttFiles.forEach(file => {
    // console.log(`${testDir}/${file}`)
    writeFileSync(`${testDir}/${file}`, JSON.stringify(testJSON))
  })
})

describe("tt new", () => {
  test("`tt new`", () => {
    cli(cliArgs("new"), { ttRoot: testDir })

    const result = readFileSync(testState, "utf-8")
    const parsed: State = JSON.parse(result)
    const expected: State["task"] = {
      name: expect.any(String),
      sprints: [
        {
          start: expect.any(Number),
        },
      ],
    }
    expect(parsed.task).toEqual(expected)
  })

  test("`tt new study`", () => {
    const study = "study"
    cli(cliArgs("new", study), { ttRoot: testDir })

    const result = readFileSync(testState, "utf-8")
    const parsed: State = JSON.parse(result)
    const expected: State["task"] = {
      name: study,
      sprints: [
        {
          start: expect.any(Number),
        },
      ],
    }
    expect(parsed.task).toEqual(expected)
  })

  test.skip("`tt new study, tt new work`", () => {
    const study = "study"
    const work = "work"

    cli(cliArgs("new", study), { ttRoot: testDir })
    cli(cliArgs("new", work), { ttRoot: testDir })

    const resultState = readFileSync(testState, "utf-8")
    const parsedState: State = JSON.parse(resultState)
    const expectedState: State["task"] = {
      name: work,
      sprints: [
        {
          start: expect.any(Number),
        },
      ],
    }
    expect(parsedState.task).toEqual(expectedState)

    const resultHistory = readFileSync(testHistory, "utf-8")
    const parsedHistory: State["task"][] = JSON.parse(resultHistory)
    const expectedHistory: State["task"] = {
      name: study,
      sprints: [
        {
          start: expect.any(Number),
        },
      ],
    }
    console.log("ph", parsedHistory)
    expect(parsedHistory[0]).toEqual(expectedHistory)
  })
})
