import { execSync } from 'child_process'
import { cli } from '../src/app'
import { readFileSync, writeFileSync } from 'fs'
import {
  cliArgs,
  dev_ttDir,
  ttFiles,
  stateFile,
  historyFile,
  defaultTask,
} from '../src/util'

const testDir = `${dev_ttDir}-mode_new.test`
const testState = `${testDir}/${stateFile}`
const testHistory = `${testDir}/${historyFile}`

beforeAll(() => {
  execSync(`mkdir -p ${testDir}`)
  const testJSON = { autoGenerated: 0 }

  ttFiles.forEach(file => {
    writeFileSync(`${testDir}/${file}`, JSON.stringify(testJSON))
  })
})

describe('tt new', () => {
  test('`tt new`', () => {
    let result: string

    cli(cliArgs('new'), { ttRoot: testDir })

    result = readFileSync(testState, 'utf-8')
    expect(result).toMatch(new RegExp(defaultTask))
    expect(result).toMatch(/"start": \d+/)
    expect(result).toMatch(/sprints/)
    expect(result).not.toMatch(/"end": \d+/)
  })

  test('`tt new study`', () => {
    let result: string
    const study = 'study'

    cli(cliArgs('new', 'study'), { ttRoot: testDir })

    result = readFileSync(testState, 'utf-8')
    expect(result).toMatch(/study/)
    expect(result).toMatch(/"tracking": true/)
    expect(result).toMatch(/"start": \d+/)
    expect(result).toMatch(/sprints/)
    expect(result).not.toMatch(/"end": \d+/)
  })

  test('`tt new study, tt new work`', () => {
    let result: string

    cli(cliArgs('new', 'study'), { ttRoot: testDir })
    cli(cliArgs('new', 'work'), { ttRoot: testDir })

    result = readFileSync(testHistory, 'utf-8')
    expect(result).toMatch(/study/)
    expect(result).toMatch(/sprints/)
    expect(result).toMatch(/"start": \d+/)
    expect(result).toMatch(/"end": \d+/)
  })
})
