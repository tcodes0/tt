import { execSync } from "child_process"
import { cli } from "../src/app"
import { readFileSync, statSync, writeFileSync } from "fs"
import {
  cliArgs,
  dev_ttDir,
  ttFiles,
  stateFile,
  historyFile,
} from "../src/util"
import rm from "rimraf"
import { State } from "../src/core"

const testDir = `${dev_ttDir}-mode_new.test`
const testState = `${testDir}/${stateFile}`
const testHistory = `${testDir}/${historyFile}`

afterAll(() => {
  execSync(`mkdir -p ${testDir}`)
  const testJSON = { autoGenerated: 0 }

  ttFiles.forEach(file => {
    writeFileSync(`${testDir}/${file}`, JSON.stringify(testJSON))
  })
})

describe("tt init", () => {
  test("makes path if doesn't exist", () => {
    rm.sync(testDir)
    cli(cliArgs("init"), { ttRoot: testDir })
    expect(() => statSync(testDir)).not.toThrow(/ENOENT/)
  })

  test("erases files", () => {
    const notExpected = { nope: 4 }

    ttFiles.forEach(file => {
      writeFileSync(`${testDir}/${file}`, JSON.stringify(notExpected))
    })

    cli(cliArgs("init"), { ttRoot: testDir })

    ttFiles.forEach(file => {
      const result = readFileSync(`${testDir}/${file}`, "utf-8")
      const parsed = JSON.parse(result)
      expect(parsed).not.toEqual(notExpected)
    })
  })
})
