import { execSync } from "child_process"
import { cli } from "../src/app"
import { readFileSync, writeFileSync } from "fs"
import {
  ttDir,
  cliArgs,
  dev_ttDir,
  noop,
  production,
  ttFiles,
  stateFile,
  historyFile,
  History,
} from "../src/util"
import { State } from "../src/core"

const testDir = `${dev_ttDir}-mode_stop.test`
const testState = `${testDir}/${stateFile}`
const testHistory = `${testDir}/${historyFile}`

beforeAll(() => {
  execSync(`mkdir -p ${testDir}`)
  const testJSON = { autoGenerated: 0 }

  ttFiles.forEach(file => {
    // console.log(`${testDir}/${file}`)
    writeFileSync(`${testDir}/${file}`, JSON.stringify(testJSON))
  })
})

describe("tt stop", () => {
  test("`tt stop (not tracking so exits with 1)`", () => {
    const mock = jest.fn(() => {})
    // @ts-ignore
    process.exit = mock
    cli(cliArgs("stop"), { ttRoot: testDir })

    expect(mock).toHaveBeenCalledWith(1)
  })

  test("`tt new` `tt stop`", () => {
    cli(cliArgs("new"), { ttRoot: testDir })
    cli(cliArgs("stop"), { ttRoot: testDir })

    const result = readFileSync(testHistory, "utf-8")
    const parsed: History = JSON.parse(result)
    const { history } = parsed
    const [head] = history
    const expected: State["task"] = {
      name: expect.any(String),
      sprints: [
        {
          start: expect.any(Number),
          end: expect.any(Number),
        },
      ],
    }
    expect(head).toEqual(expected)
  })
})
